During a context switch, the operating system saves the current context of a running process, including its register values, program counter, 
and stack pointer, to memory and loads the context of another process from memory into the CPU. This allows the CPU to switch between multiple processes 
and provide the illusion of concurrency to the user.
Context switches are necessary for multitasking, where multiple processes are running concurrently on a single CPU. Without context switches, 
the CPU would be monopolized by a single process, and other processes would not be able to execute until the running process completes.
Ideally, we want the OS to perform as few context switches as possible. This is because context switches are relatively expensive operations that consume 
CPU cycles and memory bandwidth. The more frequently the OS performs context switches, the less CPU time each process receives and the less efficient the 
system becomes. Moreover, frequent context switches can lead to cache thrashing and contention for shared resources, which can further degrade performance.
However, we also want to avoid situations where a single process monopolizes the CPU for an extended period, preventing other processes from executing. 
This can lead to poor responsiveness and slow down the overall system performance. Therefore, a balance must be struck between maximizing CPU utilization 
and minimizing context switches to achieve optimal system performance
